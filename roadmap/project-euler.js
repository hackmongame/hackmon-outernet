export default {
  name: 'Project Euler',
  pos: [0, 0],
  levels: [
    {
      title: 'Multiples of 3 and 5',
      code: 'export function multiplesOf3and5(number) {\n  // Your code here\n  return true;\n}\n',
      functionName: 'multiplesOf3and5',
      description:
        'If we list all the natural numbers below 10 that are multiples of 3 and 5, we get 3, 5, 6, and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below the provided parameter value `number`.\n',
      tests: {
        '`multiplesOf3and5(10)` should return a number':
          'describe("multiplesOf3and5(10) should return a number", () => {\n    expect(multiplesOf3and5(10)).toEqual(expect.any(Number))\n})\n',
        '`multiplesOf3and5(49)` should return 543':
          'describe("multiplesOf3and5(49) should return 543", () => {\n    expect(multiplesOf3and5(49)).toBe(543)\n})\n',
        '`multiplesOf3and5(1000)` should return 233168':
          'describe("multiplesOf3and5(1000) should return 233168", () => {\n    expect(multiplesOf3and5(1000)).toBe(233168)\n})\n',
        '`multiplesOf3and5(8456)` should return 16687353':
          'describe("`multiplesOf3and5(8456)` should return 16687353", () => {\n  expect(multiplesOf3and5(8456)).toBe(16687353)\n})\n',
        '`multiplesOf3and5(19564)` should return 89301183':
          'describe("multiplesOf3and5(19564) should return 89301183", () => {\n    expect(multiplesOf3and5(19564)).toBe(89301183)\n})\n'
      }
    },
    {
      title: 'Even Fibonacci Numbers',
      code: 'export function fiboEvenSum(n) {\n  // Your code here\n  return true;\n}\n',
      functionName: 'fiboEvenSum',
      description:
        'Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n```\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89\n```\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed `n`, find the sum of the even-valued terms.\n',
      tests: {
        '`fiboEvenSum(10)` should return a number':
          'describe("fiboEvenSum(10) should return a number", () => {\n    expect(fiboEvenSum(10)).toEqual(expect.any(Number))\n})\n',
        'Your function should sum the even-valued Fibonacci numbers: `fiboEvenSum(8)` should return 10':
          'describe("`fiboEvenSum(8)` should return 10", () => {\n  expect(fiboEvenSum(8)).toBe(10)\n})\n',
        '`fiboEvenSum(10)` should return 10.':
          'describe("fiboEvenSum(10) should return 10", () => {\n  expect(fiboEvenSum(10)).toBe(10)\n})\n',
        '`fiboEvenSum(34)` should return 44':
          'describe("fiboEvenSum(34) should return 44", () => {\n  expect(fiboEvenSum(34)).toBe(44)\n})\n',
        '`fiboEvenSum(60)` should return 44':
          'describe("fiboEvenSum(60) should return 44", () => {\n  expect(fiboEvenSum(60)).toBe(44)\n})\n',
        '`fiboEvenSum(1000)` should return 798':
          'describe("fiboEvenSum(1000) should return 798", () => {\n  expect(fiboEvenSum(1000)).toBe(798)\n})\n',
        '`fiboEvenSum(100000)` should return 60696':
          'describe("fiboEvenSum(100000) should return 60696", () => {\n  expect(fiboEvenSum(100000)).toBe(60696)\n})\n',
        '`fiboEvenSum(4000000)` should return 4613732':
          'describe("fiboEvenSum(4000000) should return 4613732", () => {\n  expect(fiboEvenSum(4000000)).toBe(4613732)\n})\n'
      }
    },
    {
      title: 'Largest Prime Factor',
      code: 'export function largestPrimeFactor(number) {\n  // Your code here\n  return true;\n}\n',
      functionName: 'largestPrimeFactor',
      description:
        'The prime factors of 13195 are 5, 7, 13, and 29.\n\nWhat is the largest prime factor of the given `number`?\n',
      tests: {
        '`largestPrimeFactor` should return a number':
          'describe("largestPrimeFactor should return a number", () => {\n  expect(largestPrimeFactor(2)).toEqual(expect.any(Number))\n})\n',
        '`largestPrimeFactor(2)` should return 2':
          'describe("largestPrimeFactor(2) should return 2", () => {\n  expect(largestPrimeFactor(2)).toBe(2)\n})\n',
        '`largestPrimeFactor(3)` should return 3':
          'describe("largestPrimeFactor(3) should return 3", () => {\n  expect(largestPrimeFactor(3)).toBe(3)\n})\n',
        '`largestPrimeFactor(5)` should return 5':
          'describe("largestPrimeFactor(5) should return 5", () => {\n  expect(largestPrimeFactor(5)).toBe(5)\n})\n',
        '`largestPrimeFactor(7)` should return 7':
          'describe("largestPrimeFactor(7) should return 7", () => {\n  expect(largestPrimeFactor(7)).toBe(7)\n})\n',
        '`largestPrimeFactor(8)` should return 2':
          'describe("largestPrimeFactor(8) should return 2", () => {\n  expect(largestPrimeFactor(8)).toBe(2)\n})\n',
        '`largestPrimeFactor(13195)` should return 29':
          'describe("largestPrimeFactor(13195) should return 29", () => {\n  expect(largestPrimeFactor(13195)).toBe(29)\n})\n',
        '`largestPrimeFactor(600851475143)` should return 6857':
          'describe("largestPrimeFactor(600851475143) should return 6857", () => {\n  expect(largestPrimeFactor(600851475143)).toBe(6857)\n})\n'
      }
    },
    {
      title: 'Largest Palindrome Product',
      code: 'export function largestPalindromeProduct(n) {\n  // Your code here\n  return true;\n}\n',
      functionName: 'largestPalindromeProduct',
      description:
        'A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.\n\nFind the largest palindrome made from the product of two `n`-digit numbers.\n',
      tests: {
        '`largestPalindromeProduct(2)` should return a number':
          'describe("largestPalindromeProduct(2) should return a number", () => {\n  expect(largestPalindromeProduct(2)).toEqual(expect.any(Number))\n})\n',
        '`largestPalindromeProduct(2)` should return 9009':
          'describe("largestPalindromeProduct(2) should return 9009", () => {\n  expect(largestPalindromeProduct(2)).toBe(9009)\n})\n',
        '`largestPalindromeProduct(3)` should return 906609':
          'describe("largestPalindromeProduct(3) should return 906609", () => {\n  expect(largestPalindromeProduct(3)).toBe(906609)\n})\n'
      }
    },
    {
      title: 'Smallest Multiple',
      code: 'export function smallestMult(n) {\n  // Your code here\n  return true;\n}\n',
      functionName: 'smallestMult',
      description:
        '2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all the numbers from 1 to `n`?\n',
      tests: {
        '`smallestMult(5)` should return a number':
          'describe("smallestMult(5) should return a number", () => {\n  expect(smallestMult(5)).toEqual(expect.any(Number))\n})\n',
        '`smallestMult(5)` should return 60':
          'describe("smallestMult(5) should return 60", () => {\n  expect(smallestMult(5)).toBe(60)\n})\n',
        '`smallestMult(7)` should return 420':
          'describe("smallestMult(7) should return 420", () => {\n  expect(smallestMult(7)).toBe(420)\n})\n',
        '`smallestMult(10)` should return 2520':
          'describe("smallestMult(10) should return 2520", () => {\n  expect(smallestMult(10)).toBe(2520)\n})\n',
        '`smallestMult(13)` should return 360360':
          'describe("smallestMult(13) should return 360360", () => {\n  expect(smallestMult(13)).toBe(360360)\n})\n',
        '`smallestMult(20)` should return 232792560':
          'describe("smallestMult(20) should return 232792560", () => {\n  expect(smallestMult(20)).toBe(232792560)\n})\n'
      }
    },
    {
      title: '10001st prime',
      code: 'export function nthPrime(n) {\n  // Your code here\n  return true;\n}\n',
      functionName: 'nthPrime',
      description:
        'By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the `n`th prime number?\n',
      tests: {
        '`nthPrime(6)` should return a number':
          'describe("nthPrime(6) should return a number", () => {\n  expect(nthPrime(6)).toEqual(expect.any(Number))\n})\n',
        '`nthPrime(6)` should return 13':
          'describe("nthPrime(6) should return 13", () => {\n  expect(nthPrime(6)).toBe(13)\n})\n',
        '`nthPrime(10)` should return 29':
          'describe("nthPrime(10) should return 29", () => {\n  expect(nthPrime(10)).toBe(29)\n})\n',
        '`nthPrime(100)` should return 541':
          'describe("nthPrime(100) should return 541", () => {\n  expect(nthPrime(100)).toBe(541)\n})\n',
        '`nthPrime(1000)` should return 7919':
          'describe("nthPrime(1000) should return 7919", () => {\n  expect(nthPrime(1000)).toBe(7919)\n})\n',
        '`nthPrime(10001)` should return 104743':
          'describe("nthPrime(10001) should return 104743", () => {\n  expect(nthPrime(10001)).toBe(104743)\n})\n'
      }
    },
    {
      title: 'Summation of Primes',
      code: 'export function primeSummation(n) {\n  // Your code here\n  return true;\n}\n',
      functionName: 'primeSummation',
      description:
        'The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below `n`.\n',
      tests: {
        '`primeSummation(17)` should return a number':
          'describe("primeSummation(17) should return a number", () => {\n  expect(primeSummation(17)).toEqual(expect.any(Number))\n})\n',
        '`primeSummation(17)` should return 41':
          'describe("primeSummation(17) should return 41", () => {\n  expect(primeSummation(17)).toBe(41)\n})\n',
        '`primeSummation(2001)` should return 277050':
          'describe("primeSummation(2001) should return 277050", () => {\n  expect(primeSummation(2001)).toBe(277050)\n})\n',
        '`primeSummation(140759)` should return 873608362':
          'describe("primeSummation(140759) should return 873608362", () => {\n  expect(primeSummation(140579)).toBe(873608362)\n})\n',
        '`primeSummation(2000000)` should return 142913828922':
          'describe("primeSummation(2000000) should return 142913828922", () => {\n  expect(primeSummation(2000000)).toBe(142913828922)\n})\n'
      }
    },
    {
      title: 'Highly divisble triangular number',
      code: 'export function divisibleTriangleNumber(n) {\n  // Your code here\n  return true;\n}\n',
      functionName: 'divisibleTriangleNumber',
      description:
        'The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\nLet us list the factors of the first seven triangle numbers:\n\n1: 1\n3: 1, 3\n6: 1, 2, 3, 6\n10: 1, 2, 5, 10\n15: 1, 3, 5, 15\n21: 1, 3, 7, 21\n28: 1, 2, 4, 7, 14, 28\n\nWe can see that 28 is the first triangle number to have over five divisors.\n\nWhat is the value of the first triangle number to have over `n` divisors?\n',
      tests: {
        '`divisibleTriangleNumber(5)` should return a number':
          'describe("divisibleTriangleNumber(5) should return a number", () => {\n  expect(divisibleTriangleNumber(5)).toEqual(expect.any(Number))\n})\n',
        '`divisibleTriangleNumber(5)` should return 28':
          'describe("divisibleTriangleNumber(5) should return 28", () => {\n  expect(divisibleTriangleNumber(5)).toBe(28)\n})\n',
        '`divisibleTriangleNumber(23)` should return 630':
          'describe("divisibleTriangleNumber(23) should return 630", () => {\n  expect(divisibleTriangleNumber(23)).toBe(630)\n})\n',
        '`divisibleTriangleNumber(167)` should return 1385280':
          'describe("divisibleTriangleNumber(167) should return 1385280", () => {\n  expect(divisibleTriangleNumber(167)).toBe(1385280)\n})\n',
        '`divisibleTriangleNumber(374)` should return 17907120':
          'describe("divisibleTriangleNumber(374) should return 17907120", () => {\n  expect(divisibleTriangleNumber(374)).toBe(17907120)\n})\n',
        '`divisibleTriangleNumber(500)` should return 76576500':
          'describe("divisibleTriangleNumber(500) should return 76576500", () => {\n  expect(divisibleTriangleNumber(500)).toBe(76576500)\n})\n'
      }
    }
  ]
}
